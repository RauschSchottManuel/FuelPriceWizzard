// <auto-generated />
using System;
using FuelPriceWizard.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelPriceWizard.DataAccess.Migrations
{
    [DbContext(typeof(FuelPriceWizardDbContext))]
    [Migration("20240906205318_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("PriceReadingId")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Symbol");

                    b.HasKey("Id")
                        .HasName("PK_CurrencyId");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Abbreviation");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DisplayValue");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.HasKey("Id")
                        .HasName("PK_FuelTypeId");

                    b.ToTable("FuelTypes", (string)null);
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.GasStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Designation");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.HasKey("Id")
                        .HasName("PK_GasStationId");

                    b.ToTable("GasStations", (string)null);
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.PriceReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FetchedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("FetchedAt");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GasStationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasPrecision(3)
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id")
                        .HasName("PK_PriceReadingId");

                    b.HasIndex("CurrencyId")
                        .IsUnique();

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("GasStationId");

                    b.ToTable("PriceReadings", (string)null);
                });

            modelBuilder.Entity("FuelTypeGasStation", b =>
                {
                    b.Property<int>("FuelTypesId")
                        .HasColumnType("int");

                    b.Property<int>("GasStationsId")
                        .HasColumnType("int");

                    b.HasKey("FuelTypesId", "GasStationsId");

                    b.HasIndex("GasStationsId");

                    b.ToTable("FuelTypeGasStation");
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.GasStation", b =>
                {
                    b.OwnsOne("FuelPriceWizard.DataAccess.Entities.Base.Address", "Address", b1 =>
                        {
                            b1.Property<int>("GasStationId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<double>("Lat")
                                .HasColumnType("float");

                            b1.Property<double>("Long")
                                .HasColumnType("float");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Zip")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("GasStationId");

                            b1.ToTable("GasStations");

                            b1.ToJson("Address");

                            b1.WithOwner("GasStation")
                                .HasForeignKey("GasStationId");

                            b1.Navigation("GasStation");
                        });

                    b.OwnsMany("FuelPriceWizard.DataAccess.Entities.Base.OpeningHours", "OpeningHours", b1 =>
                        {
                            b1.Property<int>("GasStationId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<TimeOnly>("From")
                                .HasColumnType("time");

                            b1.Property<TimeOnly>("To")
                                .HasColumnType("time");

                            b1.HasKey("GasStationId", "Id");

                            b1.ToTable("GasStations");

                            b1.ToJson("OpeningHours");

                            b1.WithOwner("GasStation")
                                .HasForeignKey("GasStationId");

                            b1.Navigation("GasStation");
                        });

                    b.Navigation("Address");

                    b.Navigation("OpeningHours");
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.PriceReading", b =>
                {
                    b.HasOne("FuelPriceWizard.DataAccess.Entities.Base.Currency", "Currency")
                        .WithOne("PriceReading")
                        .HasForeignKey("FuelPriceWizard.DataAccess.Entities.PriceReading", "CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelPriceWizard.DataAccess.Entities.Base.FuelType", "FuelType")
                        .WithMany("PriceReadings")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelPriceWizard.DataAccess.Entities.Base.GasStation", "GasStation")
                        .WithMany("PriceReadings")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("FuelType");

                    b.Navigation("GasStation");
                });

            modelBuilder.Entity("FuelTypeGasStation", b =>
                {
                    b.HasOne("FuelPriceWizard.DataAccess.Entities.Base.FuelType", null)
                        .WithMany()
                        .HasForeignKey("FuelTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelPriceWizard.DataAccess.Entities.Base.GasStation", null)
                        .WithMany()
                        .HasForeignKey("GasStationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.Currency", b =>
                {
                    b.Navigation("PriceReading");
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.FuelType", b =>
                {
                    b.Navigation("PriceReadings");
                });

            modelBuilder.Entity("FuelPriceWizard.DataAccess.Entities.Base.GasStation", b =>
                {
                    b.Navigation("PriceReadings");
                });
#pragma warning restore 612, 618
        }
    }
}

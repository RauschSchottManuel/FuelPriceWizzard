name: Sonarqube Scan

on:
  push:
    branches:
      - main


jobs:
  general:
    name: General build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#  dotnet:
#    name: .NET Build and analyze
#    runs-on: windows-latest
#    steps:
#      - name: Set up JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.17
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Cache SonarQube packages
#        uses: actions/cache@v1
#        with:
#          path: ~\.sonar\cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache SonarQube scanner
#        id: cache-sonar-scanner
#        uses: actions/cache@v1
#        with:
#          path: .\.sonar\scanner
#          key: ${{ runner.os }}-sonar-scanner
#          restore-keys: ${{ runner.os }}-sonar-scanner
#      - name: Install SonarQube scanner
#        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#        shell: powershell
#        run: |
#          New-Item -Path .\.sonar\scanner -ItemType Directory
#          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#      - name: Build and analyze
#        shell: powershell
#        run: |
#          .\.sonar\scanner\dotnet-sonarscanner begin /k:"example" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
#          dotnet build
#          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
